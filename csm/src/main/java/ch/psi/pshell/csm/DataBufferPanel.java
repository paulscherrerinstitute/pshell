package ch.psi.pshell.csm;

import ch.psi.pshell.camserver.PipelineClient;
import ch.psi.pshell.camserver.ProxyClient;
import ch.psi.pshell.swing.MonitoredPanel;
import ch.psi.pshell.swing.SwingUtils;
import ch.psi.pshell.utils.Str;
import java.awt.Dimension;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 */
public class DataBufferPanel extends MonitoredPanel {

    ProxyClient proxy;
    Set<String> permanentPipelineLabels = new HashSet<>();
    List<String> visibleNames = new ArrayList<>();
    final DefaultTableModel model;
    volatile boolean running = false;

    public DataBufferPanel() {
        initComponents();
        model = (DefaultTableModel) table.getModel();
    }
    
    
    public void setUrl(String url){
        setProxy(new ProxyClient(url));
    }
    
    public String getUrl(){
       if (proxy==null){
           return null;
       }
       return proxy.getUrl();
    }   
    
    public void setProxy(ProxyClient proxy){
        this.proxy = proxy;

    }
    
    public ProxyClient getProxy(){
       return proxy;
    }     
    
    void updateButtons(){
        if (!SwingUtilities.isEventDispatchThread()){
            SwingUtilities.invokeLater(()->{updateButtons();});
            return;
        }        
        buttonDataBuffer.setEnabled(!textLabel.getText().isBlank());
        buttonImageBuffer.setEnabled(!textLabel.getText().isBlank());
    }
    
    Thread updateLabels(){
        Thread t = new Thread(()->{
            //model.setNumRows(0);
            PipelineClient client = new PipelineClient(getUrl());   
            permanentPipelineLabels = new HashSet<>();
            try {
                for (String pipeline:getProxy().getPemanentInstances().keySet()){
                    try {
                        Map<String, Object> cfg = client.getConfig(pipeline);
                        String camera = Str.toString(cfg.getOrDefault("camera_name", "")).trim();
                        if (!camera.isBlank()){
                            permanentPipelineLabels.add(camera.trim());
                        } else {
                            permanentPipelineLabels.add(pipeline.split("_")[0]);
                        }
                        
                    } catch (Exception ex) {
                        Logger.getLogger(DataBufferPanel.class.getName()).log(Level.FINE, "Cannot get config of pipeline: " + pipeline);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(DataBufferPanel.class.getName()).log(Level.WARNING, null, ex);            
            }
            List<String> names = new ArrayList<>(permanentPipelineLabels);
            Collections.sort(names);
            
            visibleNames = List.copyOf(names);
            if ((filterName!=null) && (!filterName.isBlank())){
                visibleNames = visibleNames
                    .stream()
                    .filter(c -> c.toLowerCase().contains(filterName))
                    .collect(Collectors.toList());                            
            }
            
            SwingUtilities.invokeLater(()->{        
                model.setNumRows(0);
                for (String camera: visibleNames){
                    model.addRow(new Object[]{camera,});
                }
                updateButtons();        
            });
        }, "DBP Cameras Update");
        t.start();
        return t;
    }    
        
    @Override
    protected void onShow(){
        updateLabels();
    }
    
    String filterName;
    void setFilter(String str){        
        if (str==null){
            str="";
        }
        if (!str.equals(filterName)){
            filterName = str;
            updateLabels();
        }
    }
        
    void onFilter(){
        setFilter(textFilter.getText().trim().toLowerCase());
    }        
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        textFilter = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        buttonDataBuffer = new javax.swing.JButton();
        buttonImageBuffer = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textLabel = new javax.swing.JTextField();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Permanent Pipelines"));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pipeline Label"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        textFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFilterKeyReleased(evt);
            }
        });

        jLabel5.setText("Filter:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFilter)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        buttonDataBuffer.setText("Reconnect to DataBuffer");
        buttonDataBuffer.setEnabled(false);
        buttonDataBuffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDataBufferActionPerformed(evt);
            }
        });

        buttonImageBuffer.setText("Reconnect to ImageBuffer");
        buttonImageBuffer.setEnabled(false);
        buttonImageBuffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImageBufferActionPerformed(evt);
            }
        });

        jLabel1.setText("Label:");

        textLabel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textLabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textLabelKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(buttonImageBuffer)
                    .addComponent(buttonDataBuffer)
                    .addComponent(textLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonDataBuffer, buttonImageBuffer, textLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(42, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(buttonDataBuffer)
                        .addGap(18, 18, 18)
                        .addComponent(buttonImageBuffer)
                        .addGap(0, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        textLabel.setText((table.getSelectedRow()>=0) ? Str.toString(model.getValueAt(table.getSelectedRow(), 0)) : "");
        updateButtons();
    }//GEN-LAST:event_tableMouseReleased

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        textLabel.setText((table.getSelectedRow()>=0) ? Str.toString(model.getValueAt(table.getSelectedRow(), 0)) : "");
        updateButtons();
    }//GEN-LAST:event_tableKeyReleased

    private void buttonDataBufferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDataBufferActionPerformed
        try{
            String label = textLabel.getText().trim();            
            JDialog dialogMessage = showSplash("Data Buffer", new Dimension(500,200), "Reconnecting camera sources: " + label);
            running=true;
            updateButtons();            
            new Thread(()->{
                try{                    
                    String ret = DataBuffer.reconnectDataBufferCameraSources(label);          
                    showScrollableMessage( "Success", "Success reconnecting to label: " + label, ret);
                } catch (Exception ex){
                    Logger.getLogger(DataBufferPanel.class.getName()).log(Level.WARNING, null, ex);     
                    showException(ex);                    
                } finally{
                    dialogMessage.setVisible(false);
                    running = false;
                    updateButtons();
                }                
            },"DB Reconnect").start();                                    
        } catch (Exception ex){
            Logger.getLogger(DataBufferPanel.class.getName()).log(Level.WARNING, null, ex);     
            showException(ex);
        }
    }//GEN-LAST:event_buttonDataBufferActionPerformed

    private void buttonImageBufferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImageBufferActionPerformed
        try{
            String label = textLabel.getText().trim();              
            JDialog dialogMessage = showSplash("Image Buffer", new Dimension(500,200), "Reconnecting camera sources: " + label);
            running=true;
            updateButtons();            
            new Thread(()->{
                try{                    
                    String ret = DataBuffer.reconnectImageBufferCameraSources(label);          
                    showScrollableMessage( "Success",  "Success reconnecting to label: " + label, ret);
                } catch (Exception ex){
                    Logger.getLogger(DataBufferPanel.class.getName()).log(Level.WARNING, null, ex);     
                    showException(ex);                    
                } finally{
                    dialogMessage.setVisible(false);
                    running = false;
                    updateButtons();
                }                
            },"IB Reconnect").start();                                    
        } catch (Exception ex){
            Logger.getLogger(DataBufferPanel.class.getName()).log(Level.WARNING, null, ex);     
            showException(ex);
        }
    }//GEN-LAST:event_buttonImageBufferActionPerformed

    private void textLabelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textLabelKeyReleased
        updateButtons();
    }//GEN-LAST:event_textLabelKeyReleased

    private void textFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFilterKeyReleased
        try{
            onFilter();
        } catch (Exception ex){
            SwingUtils.showException(this, ex);
        }
    }//GEN-LAST:event_textFilterKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDataBuffer;
    private javax.swing.JButton buttonImageBuffer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField textFilter;
    private javax.swing.JTextField textLabel;
    // End of variables declaration//GEN-END:variables
}
