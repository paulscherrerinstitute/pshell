plugins {
    id 'java-library'
    id "eclipse"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.1"
    id "nebula.ospackage" version "8.1.0" 
}

version = '1.17.0'
group = 'ch.psi'
ext.timestamp = new Date().format("yyMMddHHmm")

ext.type = 'py'     //py, groovy, js or all
ext.javafx = false
ext.manif_addopens = 'java.base/sun.nio.ch java.base/java.io java.desktop/sun.awt java.desktop/javax.swing.text.html java.desktop/sun.swing java.base/jdk.internal.loader jdk.nashorn.internal.runtime'
ext.run_addopens = 'java.base/jdk.internal.loader=ALL-UNNAMED'
sourceCompatibility = '1.11'
ext.hdf5 = '1.10' // '1.10' or '1.8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'ch.psi.pshell.ui.App' 
}

if (!hasProperty('runArgs')) {
    ext.arguments = ''
} else {
    ext.arguments = runArgs.split (" ")
} 


repositories {
    mavenCentral()
    jcenter()
    maven { url "https://maven.scijava.org/content/repositories/public/" }     
    maven { url "https://dl.bintray.com/paulscherrerinstitute/hltools/" }
    maven { url "https://maven.scijava.org/" }
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

    
if (ext.type == 'all'){
    dependencies {
        compile 'org.python:jython-standalone:2.7.2'
        compile 'org.codehaus.groovy:groovy-all:2.4.8'
    }
} else if (ext.type == 'py'){
    dependencies {
        compile 'org.python:jython-standalone:2.7.2'
        provided 'org.codehaus.groovy:groovy-all:2.4.8'
    }    
} else if (ext.type == 'groovy'){    
    dependencies {
        provided 'org.python:jython-standalone:2.7.2'
        compile 'org.codehaus.groovy:groovy-all:2.4.8'
    }    
} else if (ext.type == 'js'){    
    dependencies {
        provided 'org.python:jython-standalone:2.7.2'
        provided 'org.codehaus.groovy:groovy-all:2.4.8'
    }
}

if (ext.hdf5 == '1.10'){
    dependencies {
        compile 'cisd:jhdf5:19.04.0'
        compile 'cisd:base:18.09.0'
        compile 'commons-io:commons-io:2.8.0'
    }
} else {
    dependencies {
        compile 'cisd:jhdf5:14.12.6'
    }
}

def urlFile = { url, name ->
    File file = new File("$buildDir/download/${name}.jar")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOut ->
                fileOut << downloadStream
            }
        }
    }
    files(file.absolutePath)
}




dependencies {
    //compile fileTree(dir: './lib', include: '*.jar')
    compile 'ch.psi:jcae:2.9.8'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.27'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.27'
    compile 'org.glassfish.jersey.media:jersey-media-sse:2.27'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.27'
    compile 'org.jfree:jfreechart:1.0.19'
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.6.1.201703071140-r'
    compile 'org.slf4j:slf4j-nop:1.7.25'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.github.rjeschke:txtmark:0.13'
    //compile 'org.rxtx:rxtx:2.1.7'
    compile 'com.neuronrobotics:nrjavaserial:5.2.1'
    compile 'net.wimpi:jamod:1.2'
    compile 'net.java.dev.jna:jna:4.4.0'
    compile 'com.fifesoft:rsyntaxtextarea:3.1.3'
    compile 'jline:jline:2.14.6'
    //compile 'org.zeromq:jeromq:0.5.1' #On BSREAD 4.0.0
    compile 'ch.psi:bsread:4.0.0'
    compile 'net.imagej:ij:1.53j'
    compile 'javax.mail:javax.mail-api:1.6.2'
    compile 'com.sun.mail:javax.mail:1.6.2'
    compile 'com.github.sarxos:webcam-capture:0.3.12'
    compile 'org.clojars.nakkaya:darcula:1.0.0'   //Netbeans darcula
    //compile 'com.bulenkov:darcula:2018.2'    //Original darcula  
    compile 'com.formdev:flatlaf:1.6'
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile 'org.jetbrains.jediterm:jediterm-pty:2.42'
    compile 'org.jetbrains.pty4j:pty4j:0.12.5'
    compile 'black.ninia:jep:3.9.1'
    
    //TIFF support for ImageIO can be added installing JAI, or one of the following dependencies:
    //compile 'com.twelvemonkeys'.imageio:imageio-tiff:3.4.1'    
    //compile 'com.tomgibara.imageio:imageio-tiff:1.0'   //maven { url "http://www.tomgibara.com/maven/repo/" }     
    //compile 'com.github.jai-imageio:jai-imageio-core:1.4.0'
    //Or else adding to extensions folder:
    //https://github.com/jai-imageio/jai-imageio-core/releases/download/jai-imageio-core-1.4.0/jai-imageio-core-1.4.0.jar

    testCompile group: 'junit', name: 'junit', version: '4.10'
}

task sourcesJar(type: Jar, dependsOn: classes) {
classifier = 'sources'
from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
classifier = 'javadoc'
from javadoc.destinationDir
}

task fatJar(type: Jar, dependsOn: jar) {
    classifier 'fat'
    duplicatesStrategy = 'exclude'  
    manifest {
        attributes (
            'Main-Class': mainClass,
            'Implementation-Version': archiveVersion,
            'Build-Time': timestamp,
            'Build-Type': type,
            'Add-Opens': manif_addopens
            //,'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }    
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } 
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA', 'MANIFEST.MF', '*.INFO' , 'LICENSE'   
        
    with jar
}

def app_name = project.name
def app_path = '/opt/' + project.name + "/" + version
def jar_file = app_path + '/lib/' + fatJar.archiveName
def sys_bin ='/usr/local/bin/'
def sys_lib ='/usr/local/lib/'

task generateRpm(type: Rpm) {
    packageName project.name
    requires 'java'
    release = 1
    //version '1.0.0'    
    arch 'noarch'
    os LINUX
  
    user='root'
    permissionGroup 'root'
    addParentDirs true

    directory(app_path, 755)
    directory(app_path + '/lib', 755)
    directory(app_path + '/bin', 755)
    
    into app_path  

    from ('build/libs') {
        into 'lib'
        fileMode 0644
    }

    from ('src/main/assembly/www') {
        into 'lib/www'
        fileMode 0644
    }

    from('scripts') {
        into 'bin'
        //Add version to startup script name
        rename { String fileName ->
            if (fileName == "startup"){
                app_name + "_" + version
            }
        }
        expand([
            "app_name": app_name,
            "app_version": version,
            "jar_file": jar_file
        ])
        fileMode 0755
    }

    link(sys_bin + app_name +   "_" + version, app_path + '/bin/' + app_name + "_" + version)   
    link(sys_bin + app_name, sys_bin + app_name + "_" + version) 

    link(sys_lib + fatJar.archiveName, app_path + '/lib/' + fatJar.archiveName)   
    link(sys_lib + "pshell.jar", sys_lib + fatJar.archiveName) 
}

if (ext.javafx == false){
    compileJava {
        //So we have parameter names for reflection
        options.compilerArgs << '-parameters'    
        exclude '**/LinePlotJavaFx.java'
    }
    
} else {
    compileJava {
        //So we have parameter names for reflection
        options.compilerArgs << '-parameters'    
    }
}


jar {
    archiveBaseName = project.name
    from('src/main/assembly') {
        include '**/*'
        exclude '**/assembly.xml'
        exclude '**/script/**/*.class'
    }
    manifest {
        attributes (
            'Main-Class': mainClass, 
            'Implementation-Version': version,
            'Build-Time': timestamp,
            'Add-Opens': manif_addopens
        )
    }       
}

task(debug, dependsOn: 'classes', type: JavaExec) {    
    //systemProperty 'java.awt.headless' ,true        
    systemProperty 'pshell.build.time', timestamp
    systemProperty 'pshell.build.type', type    
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args arguments
    ignoreExitValue = true
    debug true
    jvmArgs = [
        "--add-opens", run_addopens
    ]
}

task(run, dependsOn: 'classes', type: JavaExec) {      
    systemProperty 'pshell.build.time', timestamp
    systemProperty 'pshell.build.type', type
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args arguments 
    ignoreExitValue = true
    debug false
    jvmArgs = [
        "--add-opens", run_addopens
    ]
}


publishing {
    repositories {
        maven {
            credentials {
                username artifactoryUser 
                password artifactoryPwd
            }
            url = artifactoryUrlRel
        }
    }

    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            //artifact javadocJar
            artifact fatJar
            //artifact generateRpm
            groupId group
            artifactId project.name
            version version
        }
    }
}

    
bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']    
    override = true
    publish = true
    pkg {
        repo = 'hltools'
        name = project.name
        userOrg = 'paulscherrerinstitute'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/paulscherrerinstitute/pshell'
        version {
            name = project.version
        }         
    }
}