plugins {
    id("com.gradleup.shadow") version "8.3.5"
    id("com.netflix.nebula.rpm") version "11.6.0"
}

allprojects {
    version = '2.0.0'    
    group = 'ch.psi'
    ext.release = '1'
    ext.app_jdk = '21'
    ext.jar_suffix = 'fat'
    
    repositories {
        mavenCentral()
        maven { url "https://maven.scijava.org/" }
        //maven { url 'https://www.jitpack.io' }
        maven { 
            credentials {
                username = githubUser 
                password = githubPwd
            }            
                url "https://maven.pkg.github.com/paulscherrerinstitute/jcae" 
            }    
        maven { 
            credentials {
                username = githubUser 
                password = githubPwd
            }            
                url = "https://maven.pkg.github.com/paulscherrerinstitute/bsread_java"
            }       
        maven { url "https://maven.scijava.org/content/repositories/public/" }         
        //maven { url "https://artifacts.psi.ch/artifactory/libs-snapshots-local/" }
    }
}

subprojects { 
    apply plugin: 'java'
    apply plugin: 'com.gradleup.shadow'
    apply plugin: 'com.netflix.nebula.rpm'

    configurations {
        provided
    }

    ext.timestamp = new Date().format("yyMMddHHmm")
    ext.manif_addopens = 'java.base/sun.nio.ch java.base/java.io java.desktop/sun.awt java.desktop/javax.swing.text.html java.desktop/sun.swing java.base/jdk.internal.loader jdk.nashorn.internal.runtime java.base/java.util'
    ext.run_addopens = 'java.base/jdk.internal.loader=ALL-UNNAMED java.base/java.util=ALL-UNNAMED'
    ext.run_addexports = "java.desktop/sun.awt=ALL-UNNAMED"
    ext.run_jvargs = ["--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED", "--add-opens", "java.base/java.util=ALL-UNNAMED", "--add-exports", "java.desktop/sun.awt=ALL-UNNAMED"]

    if (hasProperty('java_exec_jdk')) {
        ext.java_exec_jdk= java_exec_jdk
        if (java_exec_jdk!=null) System.out.println "Execution JDK:" + java_exec_jdk
    } else {
        ext.java_exec_jdk = null
    }

    if (!hasProperty('runArgs')) {
        ext.arguments = ''
    } else {
        ext.arguments = runArgs.split (" ")
    } 
    
    ext.createDefaultTasks = { Project project ->
        ['run', 'debug'].each { taskName ->
            project.tasks.register(taskName, JavaExec) {
                dependsOn 'classes'
                systemProperty 'build.time', project.timestamp
                mainClass = project.mainClass
                classpath = project.sourceSets.main.runtimeClasspath
                args project.hasProperty('arguments') ? project.arguments : []
                ignoreExitValue = true
                debug = (taskName == 'debug')
                executable = project.java_exec_jdk
                jvmArgs = project.run_jvargs
            }
        }           
        
        
        def app_name = project.name
        def app_version = project.version.toString()
        def app_release = project.ext.release.toString()
        def jar_suffix = project.ext.jar_suffix.toString()
        def app_path = '/opt/' + project.name + "/" + app_version
        def app_jdk = project.ext.app_jdk.toString()
        def jar_file_name = app_name + "-" + app_version + "-" + jar_suffix + ".jar";
        def jar_file_path = app_path + '/lib/' + jar_file_name;
        def sys_bin ='/usr/local/bin/'
        def sys_lib ='/usr/local/lib/'

        project.tasks.register("rpm", Rpm) {
            requires 'java-' + app_jdk + '-openjdk'
            dependsOn 'shadowJar'            
            packageName project.name            
            release = app_release
            version  app_version
            arch 'noarch'
            os LINUX
            
            // Metadata for "rpm -qi"    
            def propsFile = file("src/main/resources/ch/psi/pshell/ui/App.properties")
            def appProps = new Properties()            
            def title = app_name
            def description = title
            if (propsFile.exists()) {
                propsFile.withInputStream { stream -> appProps.load(stream) }
                title = appProps.getProperty("Application.title", app_name)
                description = title + " - " + appProps.getProperty("Application.description", description)                
            }                        
            
            summary = description
            url = 'https://github.com/paulscherrerinstitute/jstriptool'
            vendor = 'Paul Scherrer Institute' 
            license = 'GPL'
            packageGroup = 'Applications'
            packageDescription = 'This application is part of PShell scripting environment for experiments.'


            user='root'
            permissionGroup 'root'
            addParentDirs true

            directory(app_path, 755)
            directory(app_path + '/lib', 755)
            directory(app_path + '/bin', 755)

            into app_path  

            from ('build/libs') {
                print(jar_file_name )
                include jar_file_name                 
                into 'lib'
                fileMode 0644
            }
            
            from('../scripts') {
                into 'bin'
                //Add version to startup script name
                rename { String fileName ->
                    fileName == "app_startup" ? "${app_name}_${app_version}" : fileName
                }
                expand([
                    "app_name": app_name,
                    "app_version": app_version,
                    "app_jdk": app_jdk,
                    "jar_file": jar_file_path
                ])
                fileMode 0755
            }
            

            link(sys_bin + app_name +   "_" + app_version, app_path + '/bin/' + app_name + "_" + app_version)   
            link(sys_bin + app_name, sys_bin + app_name + "_" + app_version) 
        }            
    }    
    
    ext.shadowJarMinimizeKeepJersey = { d ->
       d.exclude(d.dependency("org.glassfish.jersey.core:.*:.*"))
       d.exclude(d.dependency("org.glassfish.jersey.inject:.*:.*"))
       d.exclude(d.dependency("org.glassfish.jersey.media:.*:.*"))
    }
    
    ext.shadowJarMinimizeKeepFlatLaf = { d ->
       d.exclude(d.dependency("com.formdev:.*:.*"))
    }
    
    ext.shadowJarMinimizeKeepRsyntaxtextarea = { d ->
        d.exclude(d.dependency("com.fifesoft:rsyntaxtextarea:.*"))
    }

    ext.shadowJarMinimizeKeepDevices = { d ->
        d.exclude(d.dependency("org.zeromq:.*:.*"))
        d.exclude(d.dependency("ch.psi:bsread:.*"))
        d.exclude(d.dependency("ch.psi:bitshuffle-lz4:.*"))   
        d.exclude(d.dependency("ch.psi:jcae:.*"))      
    }

    ext.shadowJarExcludeJzy3d = { d ->
        d.exclude(d.dependency("org.jzy3d:.*:.*"))                
    }
    
    ext.shadowJarExcludeJzy3dFiles = {  d ->
        d.exclude("jogamp/**")
        d.exclude("jogl/**")
        d.exclude("newt/**")
        d.exclude("gluegen/**")
        d.exclude("natives/**")         
        d.exclude("com/jogamp/**")
    }               
                      
                    
    ext.shadowJarExcludeFramework = { d ->
        d.exclude(d.dependency("redis.clients:.*:.*"))
        d.exclude(d.dependency("net.imagej:.*:.*"))
        d.exclude(d.dependency("javax.mail::.*:.*"))            
        d.exclude(d.dependency("com.sun.mail:.*:.*"))            
        d.exclude(d.dependency("jline:.*:.*"))            
        d.exclude(d.dependency("com.neuronrobotics:.*:.*"))
        d.exclude(d.dependency("com.github.sarxos:.*:.*"))
        d.exclude(d.dependency("org.python:.*:.*"))
        d.exclude(d.dependency("org.eclipse.jgit:.*:.*"))    
        d.exclude(d.dependency("org.glassfish.jersey.containers:.*:.*"))
        d.exclude(d.dependency("org.glassfish.jersey.media:jersey-media-sse:.*"))       
        //d.exclude(d.dependency("org.apache.commons:commons-math3:.*"))     
    }
    
    ext.shadowJarExcludeFrameworkFiles = {  d ->
        d.exclude("www/**")
        d.exclude("script/**")
        d.exclude("templates/**")
        d.exclude("help/**")
        d.exclude("images/**")        
        d.exclude("resources/**")                
        d.exclude 'Log4j*'   
        d.exclude("macros/**")
        d.exclude("Lib/**")   
        d.exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA', 'MANIFEST.MF', '*.INFO' , 'LICENSE'   
        d.exclude("JCALibrary.properties") //!!! Can be removed if using JCAE?
    }                    
    
    ext.shadowJarExcludeDevices = { d ->
        d.exclude(d.dependency("ch.psi:bsread:.*"))
        d.exclude(d.dependency("ch.psi:bitshuffle-lz4:.*"))   
        d.exclude(d.dependency("ch.psi:jcae:.*"))     
    }
    
    ext.shadowJarExcludeJhdf5 = { d -> 
        d.exclude(d.dependency("cisd:jhdf5::.*"))
        d.exclude(d.dependency("black.ninia:.*:.*"))                        
    }
    
    ext.shadowJarExcludeJhdf5Files = {  d ->
        d.exclude("jep/**")
        d.exclude("native/**")
    }                    
    
    ext.shadowJarSetup = { jarTask ->
        def mainClassName = project.hasProperty('mainClass') ? project.mainClass : ''
        def buildTime = project.hasProperty('timestamp') ? project.timestamp : new Date().format("yyMMddHHmm")
        def manif_addopens = project.hasProperty('manif_addopens') ? project.manif_addopens : ''
        def jar_suffix = project.ext.jar_suffix.toString()
        jarTask.manifest {
            attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version,
                'Build-Time': buildTime,
                'Add-Opens': manif_addopens
            )
        }
        
        jarTask.archiveClassifier.set(jar_suffix)
        jarTask.mergeServiceFiles()        // important for things like logging, META-INF/services        
    }        

    java {
        sourceCompatibility = JavaVersion.VERSION_21
    }


    dependencies {
        implementation 'commons-io:commons-io:2.18.0'
        implementation 'org.apache.commons:commons-lang3:3.13.0'    
        implementation 'org.apache.commons:commons-math3:3.6.1'
        implementation 'org.python:jython-standalone:2.7.4'        
        implementation 'black.ninia:jep:4.2.0'
        implementation 'net.imagej:ij:1.54i'
        implementation 'org.zeromq:jeromq:0.6.0'   
        implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.1.7'
        implementation 'org.glassfish.jersey.core:jersey-client:3.1.7'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.17.1'
        implementation 'ch.psi:jcae:3.0.0'
        
        compileOnly 'org.codehaus.groovy:groovy-all:2.4.8'
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    }                 
}

def jarsTask = tasks.register('jars') {
    description = 'Generates all fat JARs for app subprojects'
    group = 'build'
}

def rpmsTask = tasks.register('rpms') {
    description = 'Generates all RPMs for app subprojects'
    group = 'rpm'
}
    

// Populate it after all projects are evaluated
/*
gradle.projectsEvaluated {
    subprojects.each { subproj ->        
        if (subproj.hasProperty('mainClass')){
            def shadowTask = subproj.tasks.findByName('shadowJar')
            if (shadowTask != null) {
                jarsTask.configure {
                    print(shadowTask)
                    dependsOn shadowTask
                }
            }
        }
    }
}
*/
afterEvaluate {
    tasks.named('jars') {
        subprojects.each { subproj ->
            if (subproj.hasProperty('mainClass')) {
                dependsOn("${subproj.path}:shadowJar")
            }
        }
    }
}

afterEvaluate {
    tasks.named('rpms') {
        subprojects.each { subproj ->
            if (subproj.hasProperty('mainClass')) {
                dependsOn("${subproj.path}:rpm")
            }
        }
    }
}