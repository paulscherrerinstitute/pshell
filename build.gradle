apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

version = '1.10.0' 
group = 'ch.psi'
ext.timestamp = new Date().format("yyMMddHHmm")

//py, groovy, js or all
ext.type = 'py'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'ch.psi.pshell.ui.App' 
}

if (!hasProperty('runArgs')) {
    ext.arguments = ''
} else {
    ext.arguments = runArgs.split (" ")
} 


repositories {
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

    
if (ext.type == 'all'){
    dependencies {
        compile 'org.python:jython-standalone:2.7.1'
        compile 'org.codehaus.groovy:groovy-all:2.4.8'
    }
} else if (ext.type == 'py'){
    dependencies {
        compile 'org.python:jython-standalone:2.7.1'
        provided 'org.codehaus.groovy:groovy-all:2.4.8'
    }    
} else if (ext.type == 'groovy'){    
    dependencies {
        provided 'org.python:jython-standalone:2.7.1'
        compile 'org.codehaus.groovy:groovy-all:2.4.8'
    }    
} else if (ext.type == 'js'){    
    dependencies {
        provided 'org.python:jython-standalone:2.7.1'
        provided 'org.codehaus.groovy:groovy-all:2.4.8'
    }
}

dependencies {
    //TODO: jcae  must be published in public repo
    //compile 'ch.psi:jcae:2.9.5'            
    compile 'org.epics:caj:1.1.12'        
    compile files('lib/ch/psi/jcae/jcae-2.9.7.jar')
    
    //compile 'org.glassfish.jersey.core:jersey-common:2.25'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.25'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.25'
    compile 'org.glassfish.jersey.media:jersey-media-sse:2.25'
    //compile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'  //TODO: bsread is using 2.8.8.1
    
    //compile 'ch.sis:ch.sis.jhdf5:14.12.6'
    compile files('lib/ch/systemsx/cisd/sis-jhdf5-batteries_included-14.12.6.jar')        
    compile 'org.jfree:jfreechart:1.0.19'
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.6.1.201703071140-r'
    compile 'org.slf4j:slf4j-nop:1.7.25'
    compile 'org.zeromq:jeromq:0.4.0'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.github.rjeschke:txtmark:0.13'
    compile 'org.rxtx:rxtx:2.1.7'
    compile 'net.wimpi:jamod:1.2'
    compile 'net.java.dev.jna:jna:4.4.0'
    compile 'com.fifesoft:rsyntaxtextarea:2.6.1'
    compile 'jline:jline:2.14.3'
    
    //TODO: bsread  must be published in public repo
    //compile 'ch.psi:bsread:3.4.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.8.1' 
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'net.jpountz.lz4:lz4:1.3.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile files('lib/ch/psi/bitshuffle-lz4/bitshuffle-lz4-1.1.2.jar')
    compile files('lib/ch/psi/bsread/bsread-3.4.4.jar')
    
    compile 'net.imagej:ij:1.51j'    
    compile 'javax.mail:javax.mail-api:1.6.0'
    compile 'com.sun.mail:javax.mail:1.6.0'
    compile 'com.github.sarxos:webcam-capture:0.3.11'
    compile files('lib/com/bulenkov/darcula/darcula-1.0.0.jar')    
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

/*
task sourcesJar(type: Jar, dependsOn: classes) {
classifier = 'sources'
from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
classifier = 'javadoc'
from javadoc.destinationDir
}
 */

task fatJar(type: Jar, dependsOn: jar) {
    classifier 'fat'
    duplicatesStrategy = 'exclude'  
    manifest {
        attributes (
            'Main-Class': mainClass,
            'Implementation-Version': version,
            'Build-Time': timestamp,
            'Build-Type': type
            //,'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }    
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } 
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'     
        
    with jar
}

artifacts {
    
    //archives sourcesJar
    //archives javadocJar
    archives fatJar
}

compileJava {
    //So we have parameter names for reflection
    options.compilerArgs << '-parameters'
}

uploadArchives {
    repositories {
        mavenDeployer {
            setUniqueVersion(true)
            repository(url: "https://artifacts.psi.ch/artifactory/releases"){
            	authentication(userName: "upload", password: "{DESede}eWKHxAtQ2Dc=")
            }
            snapshotRepository(url: "https://artifacts.psi.ch/artifactory/releases"){
            	authentication(userName: "upload", password: "{DESede}eWKHxAtQ2Dc=")
            }        
            pom.groupId = project.group
            pom.artifactId =  project.name
            pom.version = version
        }
    }
}


jar {
    baseName = project.name
    from('src/main/assembly') {
        include '**/*'
        exclude '**/assembly.xml'
        exclude '**/script/**/*.class'
    }
    manifest {
        attributes (
            'Main-Class': mainClass, 
            'Implementation-Version': version,
            'Build-Time': timestamp
        )
    }       
}

task(debug, dependsOn: 'classes', type: JavaExec) {    
    //systemProperty 'java.awt.headless' ,true        
    systemProperty 'pshell.build.time', timestamp
    systemProperty 'pshell.build.type', type    
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args arguments
    ignoreExitValue = true
    debug true
}

task(run, dependsOn: 'classes', type: JavaExec) {      
    systemProperty 'pshell.build.time', timestamp
    systemProperty 'pshell.build.type', type
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args arguments 
    ignoreExitValue = true
    debug false
}