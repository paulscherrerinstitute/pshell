plugins {
    id("com.gradleup.shadow") version "8.3.8"
    id("com.netflix.nebula.rpm") version "11.11.2"
    id("maven-publish")
}

allprojects {
    version = '2.0.1'    
    group = 'ch.psi'
    ext.release = '1'
    ext.app_jdk = '21'
    ext.jar_suffix = 'fat'
    ext.build_type = 'py'     //py, groovy, js, all or light
    ext.rpm_requires = []
   
    repositories {
        mavenCentral()
        maven { url "https://maven.scijava.org/" }
        maven { url 'https://www.jitpack.io' }
        maven { 
            credentials {
                username = githubUser 
                password = githubPwd
            }            
                url "https://maven.pkg.github.com/paulscherrerinstitute/jcae" 
            }    
        maven { 
            credentials {
                username = githubUser 
                password = githubPwd
            }            
                url = "https://maven.pkg.github.com/paulscherrerinstitute/bsread_java"
            }       
        maven { url "https://maven.scijava.org/content/repositories/public/" }         
        //maven { url "https://artifacts.psi.ch/artifactory/libs-snapshots-local/" }
        maven { url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies/" }                 
    }
}

subprojects {
    plugins.apply('java')
    plugins.apply('java-library')
    plugins.apply('com.gradleup.shadow')
    plugins.apply('com.netflix.nebula.rpm')
    plugins.apply('maven-publish')

    configurations {
        provided
    }

    ext.timestamp = new Date().format("yyMMddHHmm")
    ext.add_opens = 'java.base/sun.nio.ch java.base/java.io java.desktop/sun.awt java.desktop/javax.swing.text.html java.desktop/sun.swing java.base/jdk.internal.loader jdk.nashorn.internal.runtime java.base/java.util'
    ext.add_exports = "java.desktop/sun.awt=ALL-UNNAMED"
    ext.run_jvargs = "--add-opens java.base/jdk.internal.loader=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-exports java.desktop/sun.awt=ALL-UNNAMED --enable-native-access=ALL-UNNAMED"
    ext.run_jvargs_tokens = run_jvargs.split(/ (?=--)/).collectMany { it.tokenize(" ") }

    if (hasProperty('java_exec_jdk')) {
        ext.java_exec_jdk= java_exec_jdk
        if (java_exec_jdk!=null) System.out.println "Execution JDK:" + java_exec_jdk
    } else {
        ext.java_exec_jdk = null
    }

    if (!hasProperty('runArgs')) {
        ext.arguments = ''
    } else {
        ext.arguments = runArgs.split (" ")
    } 
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }    
        
    ext.includeAssemblyDir = { Jar jarTask ->
        def assemblyDir = jarTask.project.file('src/main/assembly')
        if (assemblyDir.exists()) {
            jarTask.from(assemblyDir) {
                include '**/*'
                exclude '**/script/**/*.class'
            }
        }
    }    
    ext.createDefaultTasks = { Project project ->        
        ['run', 'debug'].each { taskName ->
            project.tasks.register(taskName, JavaExec) {
                dependsOn 'classes'
                systemProperty 'build.time', project.timestamp
                mainClass = project.mainClass
                classpath = project.sourceSets.main.runtimeClasspath
                args project.hasProperty('arguments') ? project.arguments : []
                ignoreExitValue = true
                debug = (taskName == 'debug')
                executable = project.java_exec_jdk
                jvmArgs = project.run_jvargs_tokens
                //environment 'PYTHONHOME', '/Users/gobbo_a/dev/pshell/config/dev/python-3.11.7'
                //executable = '/Applications/Apache NetBeans.app/Contents/Home/bin/java'
            }
        }           
        
        tasks.named('jar') {
            archiveBaseName.set(project.name)
            project.includeAssemblyDir(delegate)
        }           
                
        def app_name = project.name
        def app_version = project.version.toString()
        def app_release = project.ext.release.toString()
        def jar_suffix = project.ext.jar_suffix.toString()
        def run_jvargs = project.ext.run_jvargs.toString()
        def main_class = project.hasProperty('mainClass') ? project.mainClass : ''
        def package_name = project.name   
        def app_path = '/opt/' + package_name + "/" + app_version
        def app_jdk = project.ext.app_jdk.toString()
        def jar_file_name = app_name + "-" + app_version + "-" + jar_suffix + ".jar";
        def jar_file_path = app_path + '/lib/' + jar_file_name;
        def sys_bin ='/usr/local/bin/'
        def sys_lib ='/usr/local/lib/'
        def bin_file_name = "${app_name}-${app_version}"              
        def app_args_var = "APP_${app_name.replace('-', '_').toUpperCase()}_ARGS"
        def app_jvm_options_var = "APP_${app_name.replace('-', '_').toUpperCase()}_JVM_OPTIONS"
        def proj_requires = project.rpm_requires        
        

        project.tasks.register("rpm", Rpm) {
            doFirst {
                def rpmFile = archiveFile.get().asFile
                if (rpmFile.exists()) {
                    //Workaround to nebula plugin bug: must first remove old RPMs otherwise the payload digest is corrupted.
                    rpmFile.delete()
                }
            }            
            
            requires 'java-' + app_jdk + '-openjdk-devel'
            proj_requires.each { dep ->
                requires dep
            }            
            dependsOn 'shadowJar'                        
                                    
            release = app_release
            version = app_version
            arch 'noarch'
            os LINUX            
            reproducibleFileOrder = true
            
            // Metadata for "rpm -qi"
            def propsFile = file("src/main/resources/ch/psi/pshell/ui/App.properties")
            def appProps = new Properties()            
            def title = app_name
            def description = title
            if (propsFile.exists()) {
                propsFile.withInputStream { stream -> appProps.load(stream) }
                title = appProps.getProperty("Application.title", app_name)
                description = title + " - " + appProps.getProperty("Application.description", description)                
            }

            summary = description
            url = 'https://github.com/paulscherrerinstitute/jstriptool'
            vendor = 'Paul Scherrer Institute' 
            license = 'GPL'
            packageName = package_name                  
            packageGroup = 'Applications'
            packageDescription = 'This application is part of PShell scripting environment for experiments.'

            user = 'root'
            permissionGroup 'root'
            addParentDirs true

            directory(app_path, 755)
            directory(app_path + '/lib', 755)
            directory(app_path + '/bin', 755)

            into app_path  

            from ('build/libs') {
                //print(jar_file_name )
                include jar_file_name                 
                into 'lib'
                fileMode 0644
            }

            from('../scripts') {
                into 'bin'
                //Add version to startup script name
                rename { String fileName ->
                    fileName == "app_startup" ? bin_file_name : fileName
                }
                expand([
                    "app_name": app_name,
                    "app_version": app_version,
                    "app_jvm_options_var": app_jvm_options_var,
                    "app_args_var": app_args_var,
                    "app_jdk": app_jdk,
                    "main_class": main_class,
                    "jar_file": jar_file_path,
                    "run_jvargs": run_jvargs
                ])
                fileMode 0755
            }

            link(sys_bin + bin_file_name, app_path + '/bin/' + bin_file_name)   
            link(sys_bin + app_name, sys_bin + bin_file_name) 
        }
        createPublishingTask(project)
    }    
    
    ext.createPublishingTask = { Project project ->
        project.afterEvaluate {
            project.publishing {
                publications {
                    MyPublication(MavenPublication) {
                        from project.components.java
                        if (project.tasks.findByName('sourcesJar')) {
                            //artifact project.tasks.sourcesJar
                        }
                        if (project.tasks.findByName('javadocJar')) {
                            //artifact project.tasks.javadocJar
                        }
                        //Don't add shadowJar explicitly, it is automatically wired
                        //if (project.tasks.findByName('shadowJar')) {
                        //    artifact project.tasks.shadowJar
                        //}                        
                        if (project.tasks.findByName('rpm')) {
                            artifact project.tasks.rpm
                        }                            
                        groupId = project.group
                        artifactId = project.name
                        version = project.version
                    }
                }

                repositories {
                    maven {
                        credentials {
                            username artifactoryUser 
                            password artifactoryPwd
                        }
                        url = artifactoryUrlRel
                    }
                }
            }        
        }
    }    
    
    ext.shadowJarMinimizeKeepJersey = { d ->
       d.exclude(d.dependency("org.glassfish.jersey.core:.*:.*"))
       d.exclude(d.dependency("org.glassfish.jersey.inject:.*:.*"))
       d.exclude(d.dependency("org.glassfish.jersey.media:.*:.*"))
    }
    
    ext.shadowJarMinimizeKeepFlatLaf = { d ->
       d.exclude(d.dependency("com.formdev:.*:.*"))
    }
    
    ext.shadowJarMinimizeKeepRsyntaxtextarea = { d ->
        d.exclude(d.dependency("com.fifesoft:rsyntaxtextarea:.*"))
    }

    ext.shadowJarMinimizeKeepDevices = { d ->
        d.exclude(d.dependency("org.zeromq:.*:.*"))
        d.exclude(d.dependency("ch.psi:bsread:.*"))
        d.exclude(d.dependency("ch.psi:bitshuffle-lz4:.*"))   
        d.exclude(d.dependency("ch.psi:jcae:.*"))      
    }
    
    ext.shadowJarMinimizeKeepTiff = { d ->
        d.exclude(d.dependency("com.twelvemonkeys.imageio:.*:.*"))        
    }

    ext.shadowJarExcludeJzy3d = { d ->
        d.exclude(d.dependency("org.jzy3d:.*:.*"))                
    }
    
    ext.shadowJarExcludeJzy3dFiles = {  d ->
        d.exclude("jogamp/**")
        d.exclude("jogl/**")
        d.exclude("newt/**")
        d.exclude("gluegen/**")
        d.exclude("natives/**")         
        d.exclude("com/jogamp/**")
    }               
                      
                    
    ext.shadowJarExcludeFramework = { d ->
        d.exclude(d.dependency("redis.clients:.*:.*"))
        d.exclude(d.dependency("javax.mail::.*:.*"))            
        d.exclude(d.dependency("com.sun.mail:.*:.*"))            
        d.exclude(d.dependency("jline:.*:.*"))            
        d.exclude(d.dependency("com.neuronrobotics:.*:.*"))
        d.exclude(d.dependency("com.github.sarxos:.*:.*"))
        d.exclude(d.dependency("org.python:.*:.*"))        
        d.exclude(d.dependency("org.glassfish.jersey.containers:.*:.*"))
        d.exclude(d.dependency("org.glassfish.jersey.media:jersey-media-sse:.*"))       
    }
    
    ext.shadowJarExcludeMath = { d ->
        d.exclude(d.dependency("net.imagej:.*:.*"))
        d.exclude(d.dependency("org.apache.commons:commons-math3:.*"))             
    }
    
    ext.shadowJarExcludeGit = { d ->
        d.exclude(d.dependency("org.eclipse.jgit:.*:.*"))    
    }
    
    ext.shadowJarExcludeFrameworkFiles = {  d ->
        d.exclude("www/**")
        d.exclude("script/**")
        d.exclude("templates/**")
        d.exclude("help/**")
        d.exclude("images/**")        
        d.exclude("resources/**")                
        d.exclude 'Log4j*'   
        d.exclude("macros/**")
        d.exclude("Lib/**")   
        d.exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA', 'MANIFEST.MF', '*.INFO' , 'LICENSE'   
        d.exclude("JCALibrary.properties") //!!! Can be removed if using JCAE?
    }                    
    
    ext.shadowJarExcludeDevices = { d ->
        d.exclude(d.dependency("ch.psi:bsread:.*"))
        d.exclude(d.dependency("ch.psi:bitshuffle-lz4:.*"))   
        d.exclude(d.dependency("ch.psi:jcae:.*"))     
    }
    
    ext.shadowJarExcludeJhdf5 = { d -> 
        d.exclude(d.dependency("cisd:jhdf5::.*"))
        d.exclude(d.dependency("black.ninia:.*:.*"))                        
    }
    
    ext.shadowJarExcludeJhdf5Files = {  d ->
        d.exclude("jep/**")
        d.exclude("native/**")
    }                    
    
    ext.shadowJarSetup = { jarTask ->
        def mainClassName = project.hasProperty('mainClass') ? project.mainClass : ''
        def buildTime = project.hasProperty('timestamp') ? project.timestamp : new Date().format("yyMMddHHmm")
        def add_opens = project.hasProperty('add_opens') ? project.add_opens : ''
        def add_exports = project.hasProperty('add_exports') ? project.add_exports : ''
        def jar_suffix = project.ext.jar_suffix.toString()
        def build_type = project.ext.build_type.toString()
        jarTask.manifest {
            attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version,
                'Build-Time': buildTime,
                'Build-Type': build_type,
                'Add-Opens': add_opens,
                'Add-Exports': add_exports,
                'Enable-Native-Access':'ALL-UNNAMED' 
            )
        }
        
        jarTask.archiveClassifier.set(jar_suffix)
        jarTask.mergeServiceFiles()        // important for things like logging, META-INF/services        
        
        //jarTask.reproducibleFileOrder = true
        //jarTask.preserveFileTimestamps = false       
        project.includeAssemblyDir(jarTask)
    }        

    java {
        sourceCompatibility = JavaVersion.VERSION_21
    }

    ext.jython_lib = 'org.python:jython-standalone:2.7.4'
    ext.groovy_lib = 'org.codehaus.groovy:groovy-all:2.4.8'
    ext.js_lib = 'org.openjdk.nashorn:nashorn-core:15.4'     

    
    if (ext.build_type == 'all'){
        dependencies {
            implementation jython_lib
            implementation js_lib      
            implementation groovy_lib
        }
    } else if (ext.build_type == 'py'){
        dependencies {
            implementation jython_lib 
            provided groovy_lib
            provided js_lib
        }    
    } else if (ext.build_type == 'groovy'){    
        dependencies {
            implementation groovy_lib
            implementation jython_lib
            provided js_lib
        }    
    } else if (ext.build_type == 'js'){    
        dependencies {              
            implementation js_lib
            implementation jython_lib
            provided groovy_lib
        }
    } else if (ext.build_type == 'light'){    
        dependencies {              
            provided js_lib
            provided jython_lib   
            provided groovy_lib
        }
    }    
    
    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    }                 
}

def jarsTask = tasks.register('jars') {
    description = 'Generates all fat JARs for app subprojects'
    group = 'build'
}

//Can check the RPMs after build with:  find . -name '*.rpm' -exec rpm -Kv {} \;    
//Can scp the RPMs after build with:  find . -name '*.rpm' -exec scp {} <USER>@<HOST>:<DEST>/ \;
def rpmsTask = tasks.register('rpms') {
    description = 'Generates all RPMs for app subprojects'
    group = 'rpm'
}
    

// Populate it after all projects are evaluated
/*
gradle.projectsEvaluated {
    subprojects.each { subproj ->        
        if (subproj.hasProperty('mainClass')){
            def shadowTask = subproj.tasks.findByName('shadowJar')
            if (shadowTask != null) {
                jarsTask.configure {
                    print(shadowTask)
                    dependsOn shadowTask
                }
            }
        }
    }
}
*/
afterEvaluate {
    tasks.named('jars') {
        subprojects.each { subproj ->
            if (subproj.hasProperty('mainClass')) {
                dependsOn("${subproj.path}:shadowJar")
            }
        }
    }
}

afterEvaluate {
    tasks.named('rpms') {
        subprojects.each { subproj ->
            if (subproj.hasProperty('mainClass')) {
                dependsOn("${subproj.path}:rpm")
            }
        }
    }
}