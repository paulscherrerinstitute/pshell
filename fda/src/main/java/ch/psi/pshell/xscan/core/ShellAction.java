package ch.psi.pshell.xscan.core;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Action that executes a specified command when it is executed.
 */
public class ShellAction implements Action {

    private static Logger logger = Logger.getLogger(ShellAction.class.getName());

    private volatile Process process;
    private volatile boolean abort = false;
    private boolean checkExitValue = true;
    private int exitValue = 0;

    /**
     * Name (full path if it is not in the system path) of the script to execute when the execute() function of this
     * action is invoked.
     */
    private final String script;

    /**
     * @param script	Name of the command to execute when this action is invoked
     *
     * @throws IllegalArgumentException	Specified script does not exist
     */
    public ShellAction(String script) {
        String[] scri = script.split("[ ,\t]");
        File s = new File(scri[0]);
        if (!s.exists()) {
            throw new IllegalArgumentException("Script " + script + " does not exist.");
        }
        this.script = script;
    }

    @Override
    public void execute() throws InterruptedException {
        try {
            abort = false;
            logger.log(Level.FINE, "Execute script {0}", script);
            process = Runtime.getRuntime().exec(new String[]{"/bin/bash", "-c", script});
            int exitVal = process.waitFor();

            // Log output of the shell script if loglevel is finer
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("STDOUT [BEGIN]");
                // Ideally the readout of the stream should be in parallel to the processing of the script! I.e. the output appears in the log as it is generated by the script!
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    logger.finer(line);
                }
                logger.finer("STDOUT [END]");

                logger.finer("STDERR [BEGIN]");
                // Ideally the readout of the stream should be in parallel to the processing of the script! I.e. the output appears in the log as it is generated by the script!
                reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
                line = null;
                while ((line = reader.readLine()) != null) {
                    logger.finer(line);
                }
                logger.finer("STDERR [END]");
            }

            logger.log(Level.FINE, "Script [{0}] return value: {1}", new Object[]{script, exitVal});

            if (abort) {
                throw new RuntimeException("Script [" + script + "] was aborted");
            } else {
                // Check script exit value to 0 if != 0 then throw an runtime exception
                if (checkExitValue && exitVal != exitValue) {
                    throw new RuntimeException("Script [" + script + "] returned with an exit value not equal to 0");
                }
            }
            process = null;
        } catch (IOException e) {
            throw new RuntimeException("Unable to execute script: " + script, e);
        }
    }

    @Override
    public void abort() {
        abort = true;
        if (process != null) {
            process.destroy();
        }
    }

    public boolean isCheckExitValue() {
        return checkExitValue;
    }

    public void setCheckExitValue(boolean checkExitValue) {
        this.checkExitValue = checkExitValue;
    }

    public int getExitValue() {
        return exitValue;
    }

    public void setExitValue(int exitValue) {
        this.exitValue = exitValue;
    }
}
