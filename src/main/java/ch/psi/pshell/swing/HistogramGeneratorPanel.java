package ch.psi.pshell.swing;

import ch.psi.pshell.device.Device;
import ch.psi.pshell.device.HistogramGenerator;
import ch.psi.pshell.plot.LinePlotSeries;
import ch.psi.pshell.plot.Plot;
import ch.psi.utils.Histogram;
import java.awt.event.ActionEvent;
import javax.swing.JMenuItem;

/**
 * Plotting of histogram generated by HistogramGenerator.
 */         
public class HistogramGeneratorPanel extends DevicePanel {

    LinePlotSeries series;
    
    public HistogramGeneratorPanel() {
        initComponents();
        plot.getAxis(Plot.AxisId.X).setLabel("");
        plot.getAxis(Plot.AxisId.Y).setLabel("");            
        JMenuItem menuConfig = new JMenuItem("Configure Histogram Parameters...");
        menuConfig.addActionListener((ActionEvent e) -> {
            try {
              HistogramGeneratorPanel.this.showConfigEditor(true, false);
            } catch (Exception ex) {
                showException(ex);
            }
        });
        plot.addPopupMenuItem(null);
        plot.addPopupMenuItem(menuConfig);

    }
    
    @Override
    public HistogramGenerator getDevice() {
        return (HistogramGenerator) super.getDevice();
    }
        
    @Override
    public void setDevice(Device device) {
        plot.clear();
        super.setDevice(device);
        if (device!=null){
            series = new LinePlotSeries(device.getName());
            plot.addSeries(series);
            if (getDevice()!=null) {
                double[] range = getDevice().getRange();
                if (range != null){
                    plot.getAxis(Plot.AxisId.X).setRange(range[0], range[1]);
                } else {
                    plot.getAxis(Plot.AxisId.X).setAutoRange();
                }
            }        
        }
    }
    
    @Override
    protected void onDeviceCacheChanged(Object value, Object former, long timestamp, boolean valueChange) {
        Histogram histo = (Histogram)value;
        if (histo==null){
            series.clear();
        } else {
            series.setData(histo.x, histo.counts);        
            //plot.getAxis(Plot.AxisId.X).setRange(histo.min, histo.max);     
        }
    }
            
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plot = new ch.psi.pshell.plot.LinePlotJFree();

        plot.setStyle(ch.psi.pshell.plot.LinePlot.Style.Step);
        plot.setTitle("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plot, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ch.psi.pshell.plot.LinePlotJFree plot;
    // End of variables declaration//GEN-END:variables
}
