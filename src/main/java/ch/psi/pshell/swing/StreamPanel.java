package ch.psi.pshell.swing;


import ch.psi.pshell.bs.ProviderConfig.SocketType;
import ch.psi.pshell.bs.Stream;
import ch.psi.pshell.bs.StreamValue;
import ch.psi.pshell.camserver.PipelineStream;
import ch.psi.pshell.device.Device;
import ch.psi.utils.Arr;
import ch.psi.utils.Convert;
import ch.psi.utils.State;
import ch.psi.utils.Str;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import javax.swing.table.DefaultTableModel;
import org.zeromq.ZMQ;

/**
 *
 */
public class StreamPanel extends DevicePanel {

    final DefaultTableModel model;
    volatile boolean chacheChanged;
    
    public StreamPanel() {
        initComponents();
        model = (DefaultTableModel) table.getModel();
    }
    
    @Override
    public Stream getDevice() {
        return (Stream) super.getDevice();
    }
    
    @Override
    public void setDevice(Device device) {
        if ((device!=null) && (device instanceof PipelineStream)){
            super.setDevice(((PipelineStream)device).getStream());
        } else {
            super.setDevice(device);
        }
        
        if (getDevice() != null) {
            onDeviceStateChanged(getDevice().getState(), null);
            textAddress.setText(getDevice().getAddress());
            textType.setText(getDevice().getSocketType() == ZMQ.PULL ?
                    SocketType.PULL.toString() : 
                    SocketType.SUB.toString());
            this.startTimer(1000, 10);
        } else {
            clear();
        }
        updateButtons();  
    }
   
    
    void updateButtons(){             
    }
    
    void clear(){
        textAddress.setText("");
        textType.setText(null); 
        model.setNumRows(0);
        stopTimer();
    }

    
    void updateTable(StreamValue sv){
        int index = 0;
        if (sv==null){
            model.setNumRows(0);
            return;
        }
        List<String> keys= sv.getKeys();
        Collections.sort(keys);
        model.setNumRows(keys.size());
        for (String key : keys) {
            Object val = sv.getValue(key);
            String size="";
            String type = "";
            if (val!=null){
                if (val instanceof String){
                    size = String.valueOf(((String)val).length());
                } else if (val.getClass().isArray()){
                    int[] shape = Arr.getShape(val);
                    size = Convert.arrayToString(shape, " x ");
                }
                type = val.getClass().getTypeName();
                if (type.contains(".")){
                    type = type.substring(type.lastIndexOf(".")+1);
                }
            }                        
            if (index>=model.getRowCount()){
                model.addRow(new Object[]{"","","",""});            
            } else {
                model.setValueAt(key, index, 0);
                model.setValueAt(type, index, 1);
                model.setValueAt(size, index, 2);
                model.setValueAt(Str.toString(val, 10), index, 3);
            }
            
            index++;
        }  
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        textAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textType = new javax.swing.JTextField();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Channel", "Type", "Size", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        jLabel1.setText("Address:");

        textAddress.setEditable(false);

        jLabel2.setText("Type:");

        textType.setEditable(false);
        textType.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textType, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(textType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField textAddress;
    private javax.swing.JTextField textType;
    // End of variables declaration//GEN-END:variables


    @Override
    protected void onDeviceStateChanged(State state, State former) {
        updateButtons();
    }

    @Override
    protected void onDeviceCacheChanged(Object value, Object former, long timestamp, boolean valueChange) {
        chacheChanged = true;
    }    
    
    @Override
    protected void onTimer() {
        try{
            if ((getDevice()!=null) && chacheChanged){
                updateTable(getDevice().take());
            }
        } catch (Exception ex){
            getLogger().log(Level.WARNING, null, ex);
        } finally{
            chacheChanged = false;
        }
    }    
}
