package ch.psi.pshell.swing;

import ch.psi.pshell.device.Device;
import ch.psi.pshell.device.Slit;
import ch.psi.utils.State;
import ch.psi.utils.swing.SwingUtils;
import java.io.IOException;
import java.util.logging.Level;

/**
 *
 */
public final class SlitPanel extends DevicePanel {

    public SlitPanel() {
        initComponents();
        valueCenter.addListener((ValueSelection origin, double value, boolean editing) -> {
            try {
                if (editing) {
                    getDevice().getCenterReg().writeAsync(value).handle((ok, ex) -> {
                        if ((ex != null) && (ex instanceof IOException)) {
                            SwingUtils.showException(this, (Exception) ex);
                            onDeviceValueChanged(getDevice().take(), getDevice().take());
                        }
                        return ok;
                    });

                }
            } catch (Exception ex) {
                showException(ex);
            }
        });
        valueSize.addListener((ValueSelection origin, double value, boolean editing) -> {
            try {
                if (editing) {
                    getDevice().getSizeReg().writeAsync(value).handle((ok, ex) -> {
                        if ((ex != null) && (ex instanceof IOException)) {
                            SwingUtils.showException(this, (Exception) ex);
                            onDeviceValueChanged(getDevice().take(), getDevice().take());
                        }
                        return ok;
                    });
                }
            } catch (Exception ex) {
                showException(ex);
            }
        });
    }

    @Override
    public Slit getDevice() {
        return (Slit) super.getDevice();
    }

    @Override
    public void setDevice(Device device) {
        super.setDevice(device);
        valueCenter.setMinValue(getDevice().getBladePos().getMinValue());
        valueCenter.setMaxValue(getDevice().getBladeNeg().getMaxValue());
        valueSize.setMinValue(getDevice().getBladePos().getResolution());
        valueSize.setMaxValue(getDevice().getBladePos().getMaxValue() - getDevice().getBladeNeg().getMinValue());
        int precision = getDevice().getBladePos().getPrecision();
        if (precision >= 0) {
            valueCenter.setDecimals(precision);
            valueSize.setDecimals(precision);
        }
    }

    @Override
    protected void onDeviceStateChanged(State state, State former) {
        if (!state.isInitialized()) {
            clear();
        }
    }

    @Override
    protected void onDeviceValueChanged(Object value, Object former) {
        try {
            double[] pos = (double[]) getDevice().take();
            valueCenter.setValue(pos[0]);
            valueSize.setValue(pos[1]);
        } catch (Exception ex) {
            getLogger().log(Level.FINE, null, ex);
            clear();
        }
    }

    void clear() {
        valueCenter.setValue(Double.NaN);
        valueSize.setValue(Double.NaN);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        valueCenter = new ch.psi.pshell.swing.ValueSelection();
        valueSize = new ch.psi.pshell.swing.ValueSelection();

        valueCenter.setBorder(javax.swing.BorderFactory.createTitledBorder("Center"));
        valueCenter.setShowLimitButtons(false);

        valueSize.setBorder(javax.swing.BorderFactory.createTitledBorder("Size"));
        valueSize.setShowLimitButtons(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(valueSize, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
            .addComponent(valueCenter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(valueCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ch.psi.pshell.swing.ValueSelection valueCenter;
    private ch.psi.pshell.swing.ValueSelection valueSize;
    // End of variables declaration//GEN-END:variables
}
