package ch.psi.pshell.swing;

import ch.psi.pshell.device.Device;
import ch.psi.pshell.device.DiscretePositioner;
import ch.psi.utils.State;
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
        
/**
 */
public class DiscretePositionerSelector extends DevicePanel{
    String[] positions;

    public DiscretePositionerSelector() {
        initComponents();
    }

    public JComboBox getComboBox(){
        return combo;
    }    
    
    public String getText(){
        Object selection = combo.getSelectedItem();
        return (selection==null) ? null : selection.toString();
    }    

    public void setText(String text){
        combo.setSelectedItem(text);
    }    
    
    @Override
    public DiscretePositioner getDevice() {
        return (DiscretePositioner) super.getDevice();
    }

    public void write(String value, boolean showException){
        getDevice().writeAsync(value).handle((ok, ex) -> {
            if (showException){
                if ((ex != null) && ((ex instanceof IOException) || (ex instanceof IllegalArgumentException))) {
                    showException((Exception) ex);
                }
            }
            return ok;
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combo = new javax.swing.JComboBox<>();

        setName("Form"); // NOI18N

        combo.setName("combo"); // NOI18N
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(combo, 0, 175, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(combo)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        try {
            if (!updating){
                String position = combo.getSelectedItem().toString();
                write(position, true);
            }
        } catch (Exception ex) {
            showException(ex);
        }
        update();
    }//GEN-LAST:event_comboActionPerformed

    @Override
    public void setDevice(Device device) {
        clear();
        if (device != null) {
            try {
                positions = ((DiscretePositioner) device).getPositions();
                combo.setModel(new DefaultComboBoxModel(positions));
            } catch (Exception ex) {
                showException(ex);
            }
        }
        combo.setToolTipText((device==null) ? null : device.getName());
        super.setDevice(device);
    }

    void clear() {
        positions = null;
        combo.setModel(new DefaultComboBoxModel(new String[0]));
    }
    
    volatile boolean updating;
    void update() {
        try {     
            updating=true;
            DiscretePositioner device = getDevice();
            if (device != null) {
                String pos = device.getReadback().take();
                if (pos != null) {
                    combo.setSelectedItem(pos);
                }
                return;
            }
        } catch (Exception ex) {
        } finally{
            updating = false;
        }
        clear();
    }


    @Override
    protected void onDeviceStateChanged(State state, State former) {
        update();
    }

    @Override
    protected void onDeviceValueChanged(Object value, Object former) {
        update();
    }

    @Override
    protected void onDeviceReadbackChanged(Object value) {
        update();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo;
    // End of variables declaration//GEN-END:variables

}
