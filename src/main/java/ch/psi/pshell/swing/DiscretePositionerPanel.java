package ch.psi.pshell.swing;

import ch.psi.pshell.device.Device;
import ch.psi.pshell.device.DiscretePositioner;
import ch.psi.utils.Arr;
import ch.psi.utils.State;
import ch.psi.utils.swing.SwingUtils;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.SpringLayout;

/**
 */
public class DiscretePositionerPanel extends DevicePanel implements ActionListener {

    javax.swing.ImageIcon iconEmpty;
    javax.swing.ImageIcon iconSet;

    public DiscretePositionerPanel() {
        initComponents();
    }

    @Override
    public DiscretePositioner getDevice() {
        return (DiscretePositioner) super.getDevice();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPositions = new javax.swing.JPanel();
        statePanel = new ch.psi.pshell.swing.DeviceStatePanel();
        buttonStop = new javax.swing.JButton();

        setName("Form"); // NOI18N

        panelPositions.setBorder(javax.swing.BorderFactory.createTitledBorder("Positions"));
        panelPositions.setName("panelPositions"); // NOI18N

        javax.swing.GroupLayout panelPositionsLayout = new javax.swing.GroupLayout(panelPositions);
        panelPositions.setLayout(panelPositionsLayout);
        panelPositionsLayout.setHorizontalGroup(
            panelPositionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );
        panelPositionsLayout.setVerticalGroup(
            panelPositionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        statePanel.setName("statePanel"); // NOI18N

        buttonStop.setText("Stop");
        buttonStop.setName("buttonStop"); // NOI18N
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPositions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonStop)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelPositions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(statePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonStop)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        try {
            getDevice().stop();
        } catch (Exception ex) {
            showException(ex);
        }
    }//GEN-LAST:event_buttonStopActionPerformed

    Led[] leds = new Led[0];
    JButton[] buttons = new JButton[0];

    @Override
    public void setDevice(Device device) {
        //Positions Panel
        panelPositions.removeAll();
        leds = new Led[0];
        buttons = new JButton[0];
        statePanel.setDevice(device);

        if (device != null) {
            try {
                String[] positions = ((DiscretePositioner) device).getPositions();
                leds = new Led[positions.length];
                buttons = new JButton[positions.length];
                if (positions.length > 0) {
                    //BoxLayout top=new BoxLayout(this,BoxLayout.Y_AXIS);
                    FlowLayout top = new FlowLayout(FlowLayout.LEFT);
                    top.setVgap(0);
                    top.setHgap(0);
                    panelPositions.setLayout(top);

                    JPanel pn_cmd = new JPanel();

                    panelPositions.add(pn_cmd);

                    //GridLayout cmd_lm=new GridLayout(positions.length,2,10,2);
                    SpringLayout cmd_lm = new SpringLayout();
                    pn_cmd.setLayout(cmd_lm);

                    for (int i = 0; i < positions.length; i++) {
                        leds[i] = new Led();
                        leds[i].setForeground(Color.GRAY);
                        pn_cmd.add(leds[i]);

                        buttons[i] = new JButton((positions[i]).trim());
                        buttons[i].setActionCommand(positions[i]);
                        buttons[i].addActionListener(this);
                        pn_cmd.add(buttons[i]);
                    }

                    SwingUtils.makeGridSpringLayout(pn_cmd, positions.length, 2, 12, 4, 18, 6);
                    for (int i = 0; i < positions.length; i++) {
                        buttons[i].setPreferredSize(new Dimension(Math.max(100, buttons[i].getPreferredSize().width), buttons[i].getPreferredSize().height));
                    }
                }
            } catch (Exception ex) {
                showException(ex);
            }

            if (isVisible()) {
                paintAll(getGraphics());
            }
        }
        super.setDevice(device);
    }

    void clear() {
        for (Led led : leds) {
            led.setColor(Color.GRAY);
        }
    }

    void update() {
        try {
            DiscretePositioner device = getDevice();
            if (device != null) {
                //boolean canMove = isEnabled() && device.isReady(); //Assuming motors can change destination on the fly
                boolean canMove = isEnabled();
                String pos = device.getReadback().take();
                if (pos != null) {
                    for (int i = 0; i < leds.length; i++) {
                        boolean in_position = pos.equals(buttons[i].getText().trim());
                        leds[i].setColor(in_position ? Color.GREEN : Color.GRAY);
                        buttons[i].setEnabled(canMove);
                    }
                }
                return;
            }
        } catch (Exception ex) {
        }
        clear();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            String position = e.getActionCommand().trim();
            if (Arr.containsEqual(getDevice().getPositions(), position)) {
                getDevice().writeAsync(position).handle((ok, ex) -> {
                    if ((ex != null) && (ex instanceof IOException)) {
                        showException((Exception) ex);
                    }
                    return ok;
                });
            }
        } catch (Exception ex) {
            showException(ex);
        }
        update();
    }

    @Override
    protected void onDeviceStateChanged(State state, State former) {
        update();
    }

    @Override
    protected void onDeviceValueChanged(Object value, Object former) {
        update();
    }

    @Override
    protected void onDeviceReadbackChanged(Object value) {
        update();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStop;
    private javax.swing.JPanel panelPositions;
    private ch.psi.pshell.swing.DeviceStatePanel statePanel;
    // End of variables declaration//GEN-END:variables

}
