package ch.psi.pshell.swing;

import ch.psi.pshell.bs.ProviderConfig;
import ch.psi.pshell.bs.ProviderConfig.SocketType;
import ch.psi.pshell.bs.Stream;
import ch.psi.pshell.bs.StreamChannel;
import ch.psi.pshell.device.Device;
import ch.psi.pshell.device.TimestampedValue;
import ch.psi.pshell.plot.LinePlotSeries;
import ch.psi.pshell.plot.Plot;
import ch.psi.pshell.plot.LinePlot;
import ch.psi.pshell.plot.LinePlotJFree;
import ch.psi.pshell.plot.MatrixPlot;
import ch.psi.pshell.plot.MatrixPlotRenderer;
import ch.psi.pshell.plot.MatrixPlotSeries;
import ch.psi.pshell.plot.TimePlotJFree;
import ch.psi.pshell.plot.TimePlotSeries;
import static ch.psi.pshell.swing.DevicePanel.createFrame;
import ch.psi.pshell.ui.App;
import ch.psi.utils.Arr;
import ch.psi.utils.Convert;
import ch.psi.utils.EncoderJson;
import ch.psi.utils.swing.SwingUtils;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Window;
import java.util.Map;
import javax.swing.JTextArea;

/**
 * Plotting of histogram generated by HistogramGenerator.
 */         
public class StreamChannelPanel extends DevicePanel {

    Plot plot;
    JTextArea text;
    final Dimension preferredSize;
    volatile boolean isImage;

    
    public StreamChannelPanel() {
        initComponents();
        setLayout(new BorderLayout());
        preferredSize = getPreferredSize();
    }
    
    @Override
    public StreamChannel getDevice() {
        return (StreamChannel) super.getDevice();
    }
        
    @Override
    public void setDevice(Device device) {
        if (device!=getDevice()){
            removeAll();
            plot=null;
            text=null;
            super.setDevice(device);
            if (device!=null){
                TimestampedValue timestampedValue = device.takeTimestamped();
                Object value = timestampedValue.getValue();
                createPlot(value);
                if (value!=null){
                     onDeviceCacheChanged(value, value, timestampedValue.getTimestamp(), false);
                }
            }
        }
                  
    }
    
    @Override
    protected void onDeviceCacheChanged(Object value, Object former, long timestamp, boolean valueChange) {
            if (value!=null){
                if ((plot==null)&&(text==null)){
                    createPlot(value);
                }
                if (value instanceof String){
                    try{
                        text.setText(EncoderJson.encode(EncoderJson.decode((String)value, Map.class), true));
                    } catch (Exception ex){
                        text.setText((String)value);
                    }
                } else if (value.getClass().isArray()){
                    int[] shape = Arr.getShape(value);
                    if (shape.length==1){
                          if (isImage){
                              double[][] data =  (double[][]) Convert.toDouble(getDevice().toImage(value));
                             ((MatrixPlot)plot).getSeries(getDevice().getName()).setData(data);
                          } else {
                             ((LinePlot)plot).getSeries(getDevice().getName()).setData((double[]) Convert.toDouble(value));
                          }
                    } else if (shape.length==2){
                         ((MatrixPlot)plot).getSeries(getDevice().getName()).setData((double[][]) Convert.toDouble(value));
                    }
                } else {
                    ((TimePlotJFree)plot).getSeries(getDevice().getName()).appendData(timestamp, (double) Convert.toDouble(value));
                }
            }
    }
    
    
    protected void createPlot(Object val){
        removeAll();
        isImage=false;
        if (val!=null){
            plot = null;
                
            if (val instanceof String){
                text = new JTextArea();
                text.setAutoscrolls(true);
                add(text);
            } else if (val.getClass().isArray()){
                int[] shape = Arr.getShape(val);
                if (shape.length==1){
                    if (getDevice().getShape().length == 2){
                        isImage = true;
                        plot = new MatrixPlotRenderer();
                        plot.addSeries(new MatrixPlotSeries(getDevice().getName()));
                    } else {   
                        plot = new LinePlotJFree();
                        plot.addSeries(new LinePlotSeries(getDevice().getName()));
                    }
                } else if (shape.length==2){
                    plot = new MatrixPlotRenderer();
                    plot.addSeries(new MatrixPlotSeries(getDevice().getName()));
                }
            } else {
                plot = new TimePlotJFree();
                plot.addSeries(new TimePlotSeries(getDevice().getName()));
            }
            if (plot!=null){
                plot.setTitle(getDevice().getChannelName());
                plot.setTitleFont(PlotPanel.getTitleFont());
                plot.getAxis(Plot.AxisId.X).setLabel("");
                plot.getAxis(Plot.AxisId.Y).setLabel("");   
                add((Component)plot);
            }
            this.setPreferredSize(preferredSize);
        }
    }
            
    public Plot getPlot(){
        return plot;
    }
    
    public JTextArea getText(){
        return text;
    }    
    
    public static StreamChannelPanel createFrame(String channelName, String url, ProviderConfig.SocketType type, Window parent, String title) throws Exception {
        Stream stream = new Stream (url, url, (type==null) ? ProviderConfig.SocketType.SUB : type);
        stream.initialize();
        stream.start();
        stream.waitCacheChange(10000);
        StreamChannel channel = (StreamChannel)stream.getChild(channelName);
        return (StreamChannelPanel) createFrame(channel,parent, title, new Dimension(600,400));        
    }
    
    
    public static void main(String[] args) {
        try {
            App.init(args);            
            ProviderConfig.SocketType type = SocketType.SUB;
            //String url = "tcp://localhost:5554";
            //String channel = "image";
            String channel=args[0];   
            String url=args[1];   
            if ((args.length>2) && (args[2].toUpperCase().equals(ProviderConfig.SocketType.PULL.toString()))){
                type = ProviderConfig.SocketType.PULL;
            }
            StreamChannelPanel panel = createFrame (channel, url, type, null, null);
        } catch (Exception ex) {
            SwingUtils.showException(null, ex);
        }        
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
