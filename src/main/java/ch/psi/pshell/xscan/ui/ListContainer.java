package ch.psi.pshell.xscan.ui;

import ch.psi.pshell.xscan.ProcessorXscan;
import java.awt.Component;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JMenuItem;

/**
 *
 */
public class ListContainer<T> extends  EditablePanel<Object> {

//    private final List<ListItem> panels = new ArrayList<ListItem>();

    private CollapsibleContainer parentContainer = null;

    /**
     * Provider for new list elements
     */
    private ListItemProvider<T> provider;

    /**
     *
     */
    private boolean addEnabled = true;

    /**
     * Default constructor
     */
    public ListContainer() {
        this(null);
    }

    /**
     * Creates new form ListContainer
     * @param provider  Provider for list items
     */
    public ListContainer(ListItemProvider<T> provider) {
        super(null);
        this.provider = provider;

        initComponents();
        
        ProcessorXscan.setIcon(jButton1, getClass().getResource("/ch/psi/pshell/xscan/ui/icons/plus.png"));

        // BEGIN Drag and Drop
        // Again, needs to negotiate with the draggable object
        jPanel1.setTransferHandler(new ListItemTransferHandler());

        // Create the listener to do the work when dropping on this object!
        jPanel1.setDropTarget(new DropTarget(this, new ListContainerDropTargetListener(this)));
        // END Drag and Drop

        // Initialize list with items
        if(provider != null){
            for(Component comp: provider.getItems()){

                // Add a new item component to the list
                ListItem i = new ListItem(this, comp);
//                panels.add(i);
                i.setLabel(comp.getName());
                this.jPanel1.add(i);

            }


            // Deactivate add button if nothing can be added any more
            if(provider.getItemKeys().length==0){
                setAddEnabled(false);
                jButton1.setEnabled(false);
            }
        }

        this.revalidate();
        this.repaint();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 10, 1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jButton1.setBackground(getBackground());
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/psi/pshell/xscan/ui/icons/plus.png"))); // NOI18N
        jButton1.setToolTipText("Add new item");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jButton1.setMargin(new java.awt.Insets(0, 2, 0, 0));
        jButton1.setPreferredSize(new java.awt.Dimension(28, 28));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(453, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        showAddPopup(evt);
    }//GEN-LAST:event_jButton1MousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables


    public void showAddPopup(java.awt.event.MouseEvent evt){
        showAddPopup(evt, null);
    }

    public void showAddPopup(java.awt.event.MouseEvent evt, final CollapsibleContainer cont){
        String[] items = provider.getItemKeys();

        // Show popup if there can be more than 1 items added
        if(items != null){
            jPopupMenu1.removeAll();
            for(final String itemName: items){
                    JMenuItem item = new JMenuItem(itemName);
                    item.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent ae) {
                            if(cont !=null){
                                cont.setCollapsed(false);
                            }
                            ListContainer.this.newItem(itemName);
                        }
                    });
                    jPopupMenu1.add(item);
            }

            jPopupMenu1.show(evt.getComponent(), evt.getComponent().getWidth()/2, evt.getComponent().getHeight()/2);
        }
    }


        /**
     * Move list element up in the list. If element is already the first one
     * do nothing
     * @param element
     */
    public void moveUp(ListItem element){
        provider.moveItemUp(element.getComponent());
        modified = true;
        relayout();
    }

    /**
     * Move list element down in the list. If the element is already the last one
     * do nothing.
     * @param element
     */
    public void moveDown(ListItem element){
        provider.moveItemDown(element.getComponent());
        modified = true;
        relayout();
    }

    /**
     * Remove list item from list
     * @param element
     */
    public void remove(ListItem element){
        modified = true;
//        panels.remove(element);

        provider.removeItem(element.getComponent());

        // Remove this panel from the parent container:
        this.jPanel1.remove(element);

        this.revalidate();
        this.repaint();

        // Activate add button if something can be added again
        if(provider.getItemKeys().length!=0){
            setAddEnabled(true);
            jButton1.setEnabled(true);
        }
    }

    
    /**
     * Return whether the list is empty or not
     * @return
     */
    public boolean isEmpty(){
        return provider.isEmpty();
    }

    /**
     * Get the size of the list
     * @return
     */
    public int getListSize(){
        return provider.size();
    }


    /**
     * Get item keys
     * @return
     */
    public String[] getItemKeys(){
        return(provider.getItemKeys());
    }

    /**
     * Add new item to list
     * @param key
     */
    public void newItem(String key){
        modified = true;
        Component comp = provider.newItem(key);

        // Check whether component is not null
        if(comp != null){

            // Add a new item component to the list
            ListItem i = new ListItem(this, comp);
//            panels.add(i);
            i.setLabel(comp.getName());
            this.jPanel1.add(i);

            this.revalidate();
            this.repaint();

            // Deactivate add button if nothing can be added any more
            if(provider.getItemKeys().length==0){
                setAddEnabled(false);
                jButton1.setEnabled(false);

            }
        }
    }



    // TODO REMOVE !!!!

//    /**
//     * Returns the List panels.
//     * Note that for drag and drop, these will be cleared, and the panels will be added back in the correct order!
//     * @return
//     */
//    protected List<ListItem> getPanels() {
//        return panels;
//    }
//
    /**
     * Relayout panel
     */
    public void relayout() {
        this.jPanel1.removeAll();
        for(Component c: provider.getItems()){
            ListItem i = new ListItem(this, c);
//            panels.add(i);
            i.setLabel(c.getName());
            this.jPanel1.add(i);
        }

        this.revalidate();
        this.repaint();
    }

    public boolean isAddEnabled() {
        return addEnabled;
    }

    public void setAddEnabled(boolean addEnabled) {
        this.addEnabled = addEnabled;
        if(parentContainer != null){
            parentContainer.setAddEnabled(addEnabled);
        }
    }

    public void showAdd(boolean show){
        jButton1.setVisible(show);
    }


    public void setParentContainer(CollapsibleContainer container){
        this.parentContainer = container;
    }
}
