package ch.psi.pshell.xscan.ui;

import java.awt.event.MouseAdapter;

/**
 *
 */
public class CollapsibleListContainer<T> extends javax.swing.JPanel {

    private ListContainer<T> listContainer;

    /**
     * Default constructor - do not use!
     */
    public CollapsibleListContainer() {
        this(null);
    }

    /** Creates new form CollapsibleListContainer */
    public CollapsibleListContainer(ListItemProvider<T> provider) {
        this.listContainer = new ListContainer<T>(provider);
        listContainer.showAdd(false);
        
        initComponents();

        this.collapsibleContainer1.setChildContainer(listContainer);
        this.collapsibleContainer1.activateAddButton(new MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listContainer.showAddPopup(evt, collapsibleContainer1);
            }
        });

        // set parent container - enable/disable add button
        listContainer.setParentContainer(collapsibleContainer1);

        // Enable or disable add button based on list container
        collapsibleContainer1.setAddEnabled(listContainer.isAddEnabled());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        collapsibleContainer1 = new CollapsibleContainer(listContainer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(collapsibleContainer1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(collapsibleContainer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ch.psi.pshell.xscan.ui.CollapsibleContainer collapsibleContainer1;
    // End of variables declaration//GEN-END:variables


    /**
     * Get header of this container
     * @return
     */
    public String getHeader(){
        return(this.collapsibleContainer1.getHeader());
    }

    /**
     * Set header of the container
     * @param header
     */
    public void setHeader(String header){
        this.collapsibleContainer1.setHeader(header);
    }

    /**
     * Collapse/open container
     * @param collapsed
     */
    public void setCollapsed(boolean collapsed){
        this.collapsibleContainer1.setCollapsed(collapsed);
    }

    /**
     * Get icon of the container
     * @param icon
     */
    public void setIcon(String icon){
        collapsibleContainer1.setIcon(icon);
    }



    /**
     * Get the list of possible items that can be added to the
     * internal list container.
     * @return
     */
    public String[] getItemKeys(){
        return(listContainer.getItemKeys());
    }

    /**
     * Add an item via its key
     * @param key
     */
    public void newItem(String key){
        this.listContainer.newItem(key);
    }

    /**
     * Check whether list is empty
     * @return
     */
    public boolean isEmpty(){
        return(listContainer.isEmpty());
    }

    public void deactivateAddButton(){
        collapsibleContainer1.deactivateAddButton();
    }    
}
