package ch.psi.pshell.plotter;

import ch.psi.pshell.core.LogManager;
import ch.psi.pshell.ui.AboutDialog;
import ch.psi.utils.Arr;
import ch.psi.utils.State;
import ch.psi.utils.Sys;
import ch.psi.utils.swing.ConfigDialog;
import ch.psi.utils.swing.MainFrame;
import java.awt.Window;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;

/**
 *
 */
public class View extends MainFrame {

    static final Logger logger = Logger.getLogger(View.class.getName());
    final Plotter pm;
    final PlotServer ps;
    final LogManager logManager;
    /**
     * Creates new form View
     */
    public View() {
        super();
        initComponents();
        setTitle("Plotter");
        setIcon(getClass().getResource("/ch/psi/pshell/ui/Icon.ico"));

        pm = new DesktopPlotter(plotPane);
        ps = new PlotServer(pm);

        loggerPanel.setOutputLength(1000);
        //loggerPanel.setInverted(true);
        loggerPanel.start();
        logManager = new LogManager();
        logManager.start(null, 0);
        logManager.setLevel(Level.FINE);
        logManager.setConsoleLoggerLevel(Level.OFF);
        loggerPanel.setVisible(false);

        //After ps is instantiated-> the context file depends on the port & host.
        restoreState();
    }

    /**
     * Called when window is being closed
     */
    @Override
    protected void onClosing() {
        saveState();
        try {
            ps.close();
        } catch (Exception ex) {
            logger.log(Level.WARNING, null, ex);
        }
        setVisible(false);
        dispose();
        System.exit(0);
    }

    @Override
    protected void onTimer() {
        if (!ps.isRunning()) {
            statusBar.setApplicationState(State.Fault);
            statusBar.setStatusMessage("Server thread stopped.");
        }
    }

    @Override
    protected void onCreate() {
        statusBar.setApplicationState(State.Ready);
    }

    @Override
    public String getSessionPath() {
        return Sys.getUserHome();
    }

    @Override
    protected String getSessionFilename(Window window) {
        return "." + getComponentName(window) + "." + Sys.getLocalHost() + "_" + ps.port + ".session." + sessionEncoder.toString();
    }

    void updatePanel() {
        try {
            PlotPanel panel = plotPane.getCurrentPanel();
            String status = panel.status;
            Double progress = panel.progress;

            if (progress == null) {
                statusBar.setApplicationState(State.Ready);
            } else {
                statusBar.setApplicationState(State.Busy);
                statusBar.setProgress(progress);
            }
            statusBar.setStatusMessage(status);
        } catch (Exception ex) {
            logger.log(Level.WARNING, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusBar = new ch.psi.pshell.ui.StatusBar();
        plotPane = new ch.psi.pshell.plotter.PlotPane();
        loggerPanel = new ch.psi.pshell.swing.LoggerPanel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        javax.swing.JMenuItem menuExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuFullScreen = new javax.swing.JCheckBoxMenuItem();
        menuLogs = new javax.swing.JCheckBoxMenuItem();
        jSeparator13 = new javax.swing.JPopupMenu.Separator();
        menuCloseAllPlots = new javax.swing.JMenuItem();
        jSeparator20 = new javax.swing.JPopupMenu.Separator();
        menuPreferences = new javax.swing.JMenuItem();
        javax.swing.JMenu menuHelp = new javax.swing.JMenu();
        javax.swing.JMenuItem menuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("PlotServer"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ch/psi/pshell/ui/View"); // NOI18N
        menuFile.setText(bundle.getString("View.menuFile.text")); // NOI18N

        menuExit.setText(bundle.getString("View.menuExit.text")); // NOI18N
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        menuBar.add(menuFile);

        menuView.setText(bundle.getString("View.menuView.text")); // NOI18N
        menuView.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuViewStateChanged(evt);
            }
        });

        menuFullScreen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuFullScreen.setSelected(true);
        menuFullScreen.setText(bundle.getString("View.menuFullScreen.text")); // NOI18N
        menuFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFullScreenActionPerformed(evt);
            }
        });
        menuView.add(menuFullScreen);

        menuLogs.setText(bundle.getString("View.menuViewLogs.text")); // NOI18N
        menuLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLogsActionPerformed(evt);
            }
        });
        menuView.add(menuLogs);
        menuView.add(jSeparator13);

        menuCloseAllPlots.setText(bundle.getString("View.menuCloseAllPlots.text")); // NOI18N
        menuCloseAllPlots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseAllPlotsActionPerformed(evt);
            }
        });
        menuView.add(menuCloseAllPlots);
        menuView.add(jSeparator20);

        menuPreferences.setText(bundle.getString("View.menuPreferences.text")); // NOI18N
        menuPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreferencesActionPerformed(evt);
            }
        });
        menuView.add(menuPreferences);

        menuBar.add(menuView);

        menuHelp.setText(bundle.getString("View.menuHelp.text")); // NOI18N

        menuAbout.setText(bundle.getString("View.menuAbout.text")); // NOI18N
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(loggerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(plotPane, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(plotPane, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(loggerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        onClosing();
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFullScreenActionPerformed
        try {
            setFullScreen(menuFullScreen.isSelected());
        } catch (Exception ex) {
            showException(ex);
        } catch (Error e) {
            logger.severe(e.toString());
        }
    }//GEN-LAST:event_menuFullScreenActionPerformed

    private void menuCloseAllPlotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseAllPlotsActionPerformed
        try {
            plotPane.clear();
        } catch (Exception ex) {
            showException(ex);
        }
    }//GEN-LAST:event_menuCloseAllPlotsActionPerformed

    private void menuPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreferencesActionPerformed
        try {
            ConfigDialog dlg = new ConfigDialog(this, true);
            dlg.setTitle("Preferences");
            dlg.setConfig(plotPane.getPreferences());
            dlg.setSize(600, 480);
            showChildWindow(dlg);
            if (dlg.getResult()) {
                plotPane.getPreferences().save();
                plotPane.applyPreferences();
            }
        } catch (Exception ex) {
            showException(ex);
        }
    }//GEN-LAST:event_menuPreferencesActionPerformed

    private void menuViewStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_menuViewStateChanged
        if (menuView.isSelected()) {
            try {
                menuFullScreen.setSelected(isFullScreen());
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_menuViewStateChanged

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        AboutDialog aboutDialog = new AboutDialog(this, true);
        aboutDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        showChildWindow(aboutDialog);
    }//GEN-LAST:event_menuAboutActionPerformed

    String text;
    String marker;
    private void menuLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLogsActionPerformed
        loggerPanel.setVisible(menuLogs.isSelected());
    }//GEN-LAST:event_menuLogsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        Sys.addToLibraryPath(new File("./home/extensions").getCanonicalPath());
        Sys.addToClassPath("./home/extensions/jzy3d-1.4.0-jar-with-dependencies.jar");
        if (Arr.containsEqual(args, "-debug")){
            PlotServer.debug = true;
        }
        /* Set the look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        if (Arr.containsEqual(args, "-mlaf")) {
            setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } else if (Arr.containsEqual(args, "-slaf")) {
            setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } else if (Arr.containsEqual(args, "-dlaf")) {
            setLookAndFeel(MainFrame.getDarculaLookAndFeel());
        } else {
            setLookAndFeel(Sys.getOSFamily()==Sys.getOSFamily().Mac ? UIManager.getSystemLookAndFeelClassName() : MainFrame.getNimbusLookAndFeel());
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu.Separator jSeparator13;
    private javax.swing.JPopupMenu.Separator jSeparator20;
    private ch.psi.pshell.swing.LoggerPanel loggerPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuCloseAllPlots;
    private javax.swing.JMenu menuFile;
    private javax.swing.JCheckBoxMenuItem menuFullScreen;
    private javax.swing.JCheckBoxMenuItem menuLogs;
    private javax.swing.JMenuItem menuPreferences;
    private javax.swing.JMenu menuView;
    private ch.psi.pshell.plotter.PlotPane plotPane;
    private ch.psi.pshell.ui.StatusBar statusBar;
    // End of variables declaration//GEN-END:variables
}
