package ch.psi.utils.swing;

import ch.psi.utils.swing.SwingUtils.OptionType;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/**
 * Implementations of this class perform edition on Document objects.
 */
public abstract class Editor<T extends Document>
        extends MonitoredPanel
        implements DocumentListener {

    JPopupMenu menuPopup;
    JMenuItem menuCopy;
    JMenuItem menuSave;
    JMenuItem menuSaveAs;
    final protected Document document;

    String title = null;
    String fileName = null;
    String fileChooserFolder = null;

    public void setFileChooserFolder(String value) {
        fileChooserFolder = value;;
    }

    public Editor(Document document) {
        menuSave = new JMenuItem("Save");
        menuSave.addActionListener(popupMenuActionListener);
        menuSaveAs = new JMenuItem("Save As...");
        menuSaveAs.addActionListener(popupMenuActionListener);
        menuCopy = new JMenuItem("Copy");
        menuCopy.addActionListener(popupMenuActionListener);

        menuPopup = new JPopupMenu();
        menuPopup.add(menuSave);
        menuPopup.add(menuSaveAs);
        menuPopup.add(menuCopy);

        this.document = document;
        this.document.addListener(this);
    }

    private ActionListener popupMenuActionListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (e.getActionCommand().equalsIgnoreCase("Save")) {
                    save();
                } else if (e.getActionCommand().equalsIgnoreCase("Save As...")) {
                    JFileChooser chooser = new JFileChooser(fileChooserFolder);
                    int rVal = chooser.showSaveDialog(Editor.this);
                    if (rVal != JFileChooser.APPROVE_OPTION) {
                        return;
                    }
                    saveAs(chooser.getSelectedFile().getAbsolutePath());
                } else if (e.getActionCommand().equalsIgnoreCase("Copy")) {
                    copy();
                }
            } catch (Exception ex) {
                SwingUtils.showException(Editor.this, ex);
            }
        }
    };

    public Document getDocument() {
        return document;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        String former = this.fileName;
        this.fileName = fileName;
        if ((title == null) || (!fileName.equals(former))) {
            setTitle((fileName == null) ? "Untitled" : fileName);
        }
    }

    public JPopupMenu getPopupMenu() {
        return menuPopup;
    }

    /**
     * Overidable
     */
    public void setReadOnly(boolean value) {
    }

    public boolean isReadOnly() {
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    final public void load(String fileName) throws IOException {
        setFileName(fileName);
        document.load(fileName);
        update();
    }

    final public void reload() throws IOException {
        if (fileName != null) {
            document.load(fileName);
        }
        updateTitle();
        update();
    }

    final public void clear() {
        setFileName(null);
        document.clear();
        update();
    }

    public void save() throws IOException {
        if (fileName == null) {
            saveAs();
        } else {
            saveAs(fileName);
        }
    }

    public void saveAs(String fileName) throws IOException {
        setFileName(fileName);
        document.save(fileName);
    }

    public void saveAs() throws IOException {
        JFileChooser chooser = new JFileChooser(fileChooserFolder);
        int rVal = chooser.showSaveDialog(this);
        if (rVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

        fileName = chooser.getSelectedFile().getAbsolutePath();
        saveAs(fileName);
    }

    //Called after document has changed
    protected void update() {

    }

    //Only copying String content
    public void copy() {
        String text = document.getContents();
        if (text != null) {
            StringSelection stringSelection = new StringSelection(text);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, (Clipboard clipboard1, Transferable contents) -> {
                //Do nothing
            });
        }
    }

    /**
     * Called when document changes
     */
    @Override
    public void onDocumentChanged(Document doc) {
        updateTitle();
    }

    public void setTitle(String title) {
        this.title = title;
        updateTitle();
    }

    private void updateTitle() {
        String title = this.title;
        if (title == null) {
            title = "";
        }
        if (hasChanged()) {
            title += "*";
            menuSave.setEnabled(true);
        } else {
            menuSave.setEnabled(false);
        }

        if (window != null) {
            if (window instanceof JDialog) {
                ((JDialog) window).setTitle(title);
            } else if (window instanceof JFrame) {
                ((JFrame) window).setTitle(title);
            }
        }
    }

    public boolean hasChanged() {
        return document.hasChanged();
    }

    Window window;

    public EditorFrame getFrame() {
        if (window == null) {
            window = new EditorFrame();
            updateTitle();
        }
        if (window instanceof JFrame) {
            return (EditorFrame) window;
        }
        return null;
    }

    public boolean checkChangeOnClose() throws IOException {
        if (hasChanged() && (!isReadOnly())) {
            switch (SwingUtils.showOption(Editor.this, "Closing", "Document has changed. Do you want to save it?", OptionType.YesNoCancel)) {
                case Yes:
                    save();
                    break;
                case No:
                    break;
                case Cancel:
                    return false;
            }
        }
        return true;
    }

    public class EditorFrame extends JFrame {

        public EditorFrame() {
            super();
            setContentPane(Editor.this);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    try {
                        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
                            if (!checkChangeOnClose()) {
                                setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                            }
                        }
                    } catch (Exception ex) {
                        SwingUtils.showException(Editor.this, ex);
                    }
                }

            });
        }

        public Editor getEditor() {
            return Editor.this;
        }
    }

    public EditorDialog getDialog(Frame parent, boolean modal) {
        if (window == null) {
            window = new EditorDialog(parent, modal);
            updateTitle();
        }
        if (window instanceof JDialog) {
            return (EditorDialog) window;
        }
        return null;
    }

    public void closeWindow(boolean force) {
        if ((window != null) && (window instanceof Window)) {
            if (force) {
                getDocument().setChanged(false);
            }
            window.setVisible(false);
        }
    }

    public class EditorDialog extends JDialog {

        public EditorDialog(Frame parent, boolean modal) {
            super(parent, modal);
            setContentPane(Editor.this);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    try {
                        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
                            if (hasChanged() && (!isReadOnly())) {
                                switch (SwingUtils.showOption(Editor.this, "Closing", "Document has changed. Do you want to save it?", OptionType.YesNoCancel)) {
                                    case Yes:
                                        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                                        save();
                                        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                                        break;
                                    case No:
                                        break;
                                    case Cancel:
                                        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                                }
                            }
                        }
                    } catch (Exception ex) {
                        SwingUtils.showException(Editor.this, ex);
                    }
                }
            });
        }

        public Editor getEditor() {
            return Editor.this;
        }
    }
}
