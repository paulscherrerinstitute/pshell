package ch.psi.pshell.swing;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Properties;
import javax.swing.JComponent;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 */
public class DeviceUpdateStrategyEditor extends Editor {

    final DefaultTableModel model;
    final String[] deviceNames;

    public DeviceUpdateStrategyEditor(String[] deviceNames) {
        super(new DeviceUpdateStrategyDocument());
        ((DeviceUpdateStrategyDocument) getDocument()).editor = this;
        initComponents();

        model = (DefaultTableModel) table.getModel();
        model.addTableModelListener((TableModelEvent e) -> {
            getDocument().setChanged(true);
        });
        this.deviceNames = deviceNames;
    }

    int getDeviceRow(String dev) {
        for (int i = 0; i < model.getRowCount(); i++) {
            if (dev.equals(model.getValueAt(i, 0))) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public void setReadOnly(boolean value) {
        table.setEnabled(!value);
    }

    @Override
    public boolean isReadOnly() {
        return !table.isEnabled();
    }

    public static class DeviceUpdateStrategyDocument extends Document {

        DeviceUpdateStrategyEditor editor;

        @Override
        public void clear() {
            editor.model.setNumRows(0);
            //Fix bug of nimbus rendering Boolean in table
            ((JComponent) editor.table.getDefaultRenderer(Boolean.class)).setOpaque(true);
            editor.table.getColumnModel().getColumn(0).setPreferredWidth(210);
            editor.table.getColumnModel().getColumn(1).setPreferredWidth(70);
            editor.table.getColumnModel().getColumn(2).setPreferredWidth(70);
            for (String name : editor.deviceNames) {
                editor.model.addRow(new Object[]{name, Boolean.FALSE, null});
            }
            setChanged(false);
        }

        @Override
        public void load(String fileName) throws IOException {
            clear();
            //TODO: Java 8 code

            Properties deviceUpdate = new Properties();

            try (FileInputStream in = new FileInputStream(fileName)) {
                deviceUpdate.load(in);
                for (String deviceName : deviceUpdate.stringPropertyNames()) {
                    try {
                        int row = editor.getDeviceRow(deviceName.trim());
                        if (row >= 0) {
                            for (String token : deviceUpdate.getProperty(deviceName).trim().split(" ")) {
                                if (token.equals("monitored")) {
                                    editor.model.setValueAt(Boolean.TRUE, row, 1);
                                } else if (token.startsWith("polled:")) {
                                    Integer interval = (Integer.valueOf(token.substring(token.indexOf(":") + 1)));
                                    interval = Math.max(interval, 0);
                                    editor.model.setValueAt(interval, row, 2);
                                }
                            }
                        }
                    } catch (Exception ex) {
                    }
                }
            }
            setChanged(false);
        }

        @Override
        public void save(String fileName) throws IOException {
            ArrayList<String> lines = new ArrayList<>();
            for (int i = 0; i < editor.model.getRowCount(); i++) {
                String name = ((String) editor.model.getValueAt(i, 0)).trim();
                Boolean monitored = (Boolean) editor.model.getValueAt(i, 1);
                Integer pollingInterval = ((Integer) editor.model.getValueAt(i, 2));
                StringBuilder sb = new StringBuilder();
                sb.append(name).append("=");
                if (monitored) {
                    sb.append("monitored");
                }
                if ((pollingInterval != null) && (pollingInterval > 0)) {
                    if (monitored) {
                        sb.append(" ");
                    }
                    sb.append("polled:").append(pollingInterval);
                }
                lines.add(sb.toString());
            }
            Files.write(Paths.get(fileName), lines);
            setChanged(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Monitored", "Polling Interval"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
